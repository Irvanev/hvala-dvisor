// components/Card/Card.tsx
import React, { useState } from 'react';
import styles from './Card.module.css';
import cx from 'classnames'; // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, classnames)

const tagIcons: Record<string, string> = {
  '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è': 'üçΩÔ∏è',
  '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è': 'üçΩÔ∏è',
  '–ò—Å–ø–∞–Ω—Å–∫–∞—è': 'üçΩÔ∏è',
  '–í–µ–≥–∞–Ω—Å–∫–æ–µ –º–µ–Ω—é': 'üå±',
  '–§–µ—Ä–º–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã': 'üåæ',
  '–î–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é': 'üßí',
  '–ü–∞–Ω–æ—Ä–∞–º–Ω—ã–π –≤–∏–¥': 'ü™ü',
  '–¢–µ—Ä—Ä–∞—Å–∞': 'ü™ü',
  '–í–∏–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞': 'üç∑',
  '–î—Ä–æ–≤—è–Ω–∞—è –ø–µ—á—å': 'üî•',
};

const priceRangeIcons: Record<string, string> = {
  '‚Ç¨': 'üí∞',
  '‚Ç¨‚Ç¨': 'üíµ',
  '‚Ç¨‚Ç¨‚Ç¨': 'üí≥',
};

interface CardProps {
  id: string;
  images: string[];
  image?: string;
  title: string;
  location?: string | {
    city?: string;
    country?: string;
    address?: string;
    street?: string;
    postalCode?: string;
  };
  rating?: number;
  cuisineTags?: string[];
  featureTags?: string[];
  priceRange?: string;
  savedStatus?: boolean;
  onClick?: () => void;
  onSaveToggle?: (saved: boolean, event?: React.MouseEvent) => void;
  variant?: 'default' | 'square'; // –ù–æ–≤—ã–π –ø—Ä–æ–ø –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
}

const Card: React.FC<CardProps> = ({
  id,
  images = [],
  image,
  title,
  location,
  rating,
  cuisineTags = [],
  featureTags = [],
  priceRange,
  savedStatus = false,
  onClick,
  onSaveToggle,
  variant = 'default', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
}) => {
  const allImages = images.length > 0 ? images : image ? [image] : [];
  const [isSaved, setIsSaved] = useState(savedStatus);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedLocation = () => {
    if (!location) return '';
    
    if (typeof location === 'string') {
      return location;
    }
    
    // –ï—Å–ª–∏ location - –æ–±—ä–µ–∫—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
    if (typeof location === 'object') {
      const locationObj = location as any;
      
      if (locationObj.city && locationObj.country) {
        return `${locationObj.city}, ${locationObj.country}`;
      } else if (locationObj.address) {
        return locationObj.address;
      } else if (locationObj.street && locationObj.city) {
        return `${locationObj.street}, ${locationObj.city}${locationObj.postalCode ? `, ${locationObj.postalCode}` : ''}`;
      } else {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return Object.values(locationObj)
          .filter(val => val && typeof val === 'string')
          .join(', ');
      }
    }
    
    return '';
  };

  const nextImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex(prevIndex =>
      prevIndex === allImages.length - 1 ? 0 : prevIndex + 1
    );
  };

  const prevImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex(prevIndex =>
      prevIndex === 0 ? allImages.length - 1 : prevIndex - 1
    );
  };

  const renderIconTags = (tags: string[]) => {
    const maxVisible = 3;
    const visibleTags = tags.slice(0, maxVisible);
    const hiddenCount = tags.length - maxVisible;

    return (
      <>
        {visibleTags.map((tag, i) => (
          <span key={i} className={styles.iconTag}>
            {tagIcons[tag] || 'üîπ'} {tag}
          </span>
        ))}
        {hiddenCount > 0 && (
          <span className={styles.moreTag}>+{hiddenCount}</span>
        )}
      </>
    );
  };

  const handleSaveClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    const newSavedState = !isSaved;
    setIsSaved(newSavedState);
    if (onSaveToggle) {
      onSaveToggle(newSavedState, e);
    }
  };

  const handleClick = () => {
    if (onClick) {
      onClick();
    }
  };

  const hasMultipleImages = allImages.length > 1;

  return (
    <div className={cx(styles.card, { [styles.squareCard]: variant === 'square' })} onClick={handleClick}>
      <div className={cx(styles.cardImageContainer, { [styles.squareImageContainer]: variant === 'square' })}>
        {allImages.length > 0 ? (
          <>
            <img
              src={allImages[currentImageIndex]}
              alt={`${title} - —Ñ–æ—Ç–æ ${currentImageIndex + 1}`}
              className={styles.cardImage}
              loading="lazy"
            />
            {hasMultipleImages && (
              <>
                <button
                  className={`${styles.carouselArrow} ${styles.carouselArrowLeft}`}
                  onClick={prevImage}
                  aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                >
                  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="15 18 9 12 15 6"></polyline>
                  </svg>
                </button>
                <button
                  className={`${styles.carouselArrow} ${styles.carouselArrowRight}`}
                  onClick={nextImage}
                  aria-label="–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                >
                  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="9 18 15 12 9 6"></polyline>
                  </svg>
                </button>
              </>
            )}
            {hasMultipleImages && (
              <div className={styles.carouselIndicators}>
                {allImages.map((_, index) => (
                  <span
                    key={index}
                    className={`${styles.carouselIndicator} ${index === currentImageIndex ? styles.carouselIndicatorActive : ''}`}
                    onClick={e => {
                      e.stopPropagation();
                      setCurrentImageIndex(index);
                    }}
                  />
                ))}
              </div>
            )}
          </>
        ) : (
          <div className={styles.cardImagePlaceholder}>–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
        )}
        <button
          className={styles.favoriteButton}
          onClick={handleSaveClick}
          aria-label={isSaved ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
        >
          <svg viewBox="0 0 24 24" fill={isSaved ? '#fff' : 'none'} stroke="#fff" strokeWidth="2" width="24" height="24">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
          </svg>
        </button>
        {rating && (
          <div className={styles.ratingBadge}>
            {rating.toFixed(1)} <span className={styles.starIcon}>‚òÖ</span>
          </div>
        )}
      </div>
      <div className={styles.cardContent}>
        <div className={styles.cardHeader}>
          <h3 className={styles.cardTitle}>{title}</h3>
          {priceRange && (
            <div
              className={`${styles.priceTag} ${
                priceRange === '‚Ç¨‚Ç¨‚Ç¨' ? styles.expensivePrice : priceRange === '‚Ç¨‚Ç¨' ? styles.moderatePrice : styles.affordablePrice
              }`}
            >
              {priceRange}
            </div>
          )}
        </div>
        {location && <p className={styles.cardLocation}>{formattedLocation()}</p>}
        <div className={styles.iconTagsRow}>{renderIconTags([...cuisineTags, ...featureTags])}</div>
      </div>
    </div>
  );
};

export default Card;