// src/components/Card/Card.tsx
import React, { useState, useEffect } from 'react';
import styles from './Card.module.css';
import cx from 'classnames';
import { favoriteService } from '../../services/FavoriteService';
import { useAuth } from '../../contexts/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { User } from '../../models/types';
import { useNotification } from '../../contexts/NotificationContext';
import { useAppTranslation } from '../../hooks/useAppTranslation';

interface CardProps {
  id: string;
  images: string[];
  image?: string;
  title: string;
  location?: string | {
    city?: string;
    country?: string;
    address?: string;
    street?: string;
    postalCode?: string;
  };
  rating?: number;
  cuisineTags?: string[];
  featureTags?: string[];
  priceRange?: string;
  savedStatus?: boolean;
  onClick?: () => void;
  onSaveToggle?: (saved: boolean, event?: React.MouseEvent) => void;
  variant?: 'default' | 'square';
}

const Card: React.FC<CardProps> = ({
  id,
  images = [],
  image,
  title,
  location,
  rating,
  cuisineTags = [],
  featureTags = [],
  priceRange,
  savedStatus,
  onClick,
  onSaveToggle,
  variant = 'default',
}) => {
  const { t } = useAppTranslation();
  const allImages = images.length > 0 ? images : image ? [image] : [];
  const [isSaved, setIsSaved] = useState(savedStatus || false);
  const [isLoading, setIsLoading] = useState(false);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const { user, isAuthenticated } = useAuth();
  const typedUser = user as User | null;
  const navigate = useNavigate();
  const locationHook = useLocation();
  const { showNotification } = useNotification();

 const translateFeature = (feature: string) => {
  // üÜï –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ Firebase
  console.log('–ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–≥:', feature);
  
  const featureMap: { [key: string]: string } = {
    // WiFi –≤–∞—Ä–∏–∞–Ω—Ç—ã
    'wifi': t('features.wifi'),
    'wi-fi': t('features.wifi'),
    'features.wifi': t('features.wifi'), // üÜï –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    '—Ç–µ—Ä—Ä–∞—Å–∞': t('features.terrace'),
    '–¥–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é': t('features.kidsMenu'),
    '–ø–∞—Ä–∫–æ–≤–∫–∞': t('features.parking'),
    '–∂–∏–≤–∞—è –º—É–∑—ã–∫–∞': t('features.liveMusic'),
    '–Ω–∞–≤—ã–Ω–æ—Å': t('features.takeaway'),
    '–¥–æ—Å—Ç–∞–≤–∫–∞': t('features.delivery'),
    '–º–æ–∂–Ω–æ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏': t('features.petFriendly'),
    '–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤': t('features.wheelchair'),
    '–æ—Ç–∫—Ä—ã—Ç–∞—è —Ç–µ—Ä—Ä–∞—Å–∞': t('features.outdoorSeating'),
    '–±–∞—Ä': t('features.bar'),
    '–∑–∞–≤—Ç—Ä–∞–∫': t('features.breakfast'),
    '–æ–±–µ–¥': t('features.lunch'),
    '—É–∂–∏–Ω': t('features.dinner'),
    '–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã': t('features.creditCards'),
    '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': t('features.reservation'),
    
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    'terrace': t('features.terrace'),
    'kids menu': t('features.kidsMenu'),
    'parking': t('features.parking'),
    'live music': t('features.liveMusic'),
    'takeaway': t('features.takeaway'),
    'delivery': t('features.delivery'),
    'pet friendly': t('features.petFriendly'),
    'wheelchair accessible': t('features.wheelchair'),
    'outdoor seating': t('features.outdoorSeating'),
    'bar': t('features.bar'),
    'breakfast': t('features.breakfast'),
    'lunch': t('features.lunch'),
    'dinner': t('features.dinner'),
    'credit cards': t('features.creditCards'),
    'reservation': t('features.reservation'),
    
    // –°–µ—Ä–±—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    'terasa': t('features.terrace'),
    'deƒçji meni': t('features.kidsMenu'),
    '≈æiva muzika': t('features.liveMusic'),
    'za poneti': t('features.takeaway'),
    'dostava': t('features.delivery'),
    'dozvoljeni ljubimci': t('features.petFriendly'),
    'pristupaƒçno za invalidska kolica': t('features.wheelchair'),
    'spolja≈°nje sedi≈°te': t('features.outdoorSeating'),
    'doruƒçak': t('features.breakfast'),
    'ruƒçak': t('features.lunch'),
    'veƒçera': t('features.dinner'),
    'kreditne kartice': t('features.creditCards'),
    'rezervacija': t('features.reservation'),
    
    // –ö—É—Ö–Ω–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    '—Å–µ—Ä–±—Å–∫–∞—è': t('features.serbian'),
    '—á–µ—Ä–Ω–æ–≥–æ—Ä—Å–∫–∞—è': t('features.montenegrin'),
    '–±–æ—Å–Ω–∏–π—Å–∫–∞—è': t('features.bosnian'),
    '—Ö–æ—Ä–≤–∞—Ç—Å–∫–∞—è': t('features.croatian'),
    '–º–∞–∫–µ–¥–æ–Ω—Å–∫–∞—è': t('features.macedonian'),
    '—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è': t('features.french'),
    '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è': t('features.italian'),
    '–∏—Å–ø–∞–Ω—Å–∫–∞—è': t('features.spanish'),
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ
    'srpska': t('features.serbian'),
    'crnogorska': t('features.montenegrin'), 
    'bosanska': t('features.bosnian'),
    'hrvatska': t('features.croatian'),
    'makedonska': t('features.macedonian'),
    'francuska': t('features.french'),
    'italijanska': t('features.italian'),
    '≈°panska': t('features.spanish'),
    
    // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫—É—Ö–æ–Ω—å
    'serbian': t('features.serbian'),
    'montenegrin': t('features.montenegrin'),
    'bosnian': t('features.bosnian'),
    'croatian': t('features.croatian'),
    'macedonian': t('features.macedonian'),
    'french': t('features.french'),
    'italian': t('features.italian'),
    'spanish': t('features.spanish'),
    
    // üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ Firebase
    '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ': t('features.historicBuilding'),
    'historic building': t('features.historicBuilding'),
    'istorijska zgrada': t('features.historicBuilding'),
    
    '–∂–∏–≤–æ–ø–∏—Å–Ω—ã–π –≤–∏–¥': t('features.scenicView'),
    'scenic view': t('features.scenicView'),
    'slikovit pogled': t('features.scenicView'),
    
    '—Å–µ–º–µ–π–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω': t('features.familyFriendly'),
    'family friendly': t('features.familyFriendly'),
    'porodiƒçno': t('features.familyFriendly'),
  };
  
  const translated = featureMap[feature.toLowerCase()];
  
  if (!translated) {
    console.warn('‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–µ–≥–∞:', feature);
    return feature; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
  }
  
  console.log('‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:', feature, '->', translated);
  return translated;
};

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const checkFavoriteStatus = async () => {
      if (isAuthenticated && typedUser) {
        try {
          const isFavorite = await favoriteService.isRestaurantFavorite(typedUser.id, id);
          setIsSaved(isFavorite);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
        }
      }
    };

    checkFavoriteStatus();
  }, [id, isAuthenticated, typedUser]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ savedStatus
  useEffect(() => {
    if (savedStatus !== undefined) {
      setIsSaved(savedStatus);
    }
  }, [savedStatus]);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedLocation = () => {
    if (!location) return '';

    if (typeof location === 'string') {
      return location;
    }

    // –ï—Å–ª–∏ location - –æ–±—ä–µ–∫—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
    if (typeof location === 'object') {
      const locationObj = location as any;

      if (locationObj.city && locationObj.country) {
        return `${locationObj.city}, ${locationObj.country}`;
      } else if (locationObj.address) {
        return locationObj.address;
      } else if (locationObj.street && locationObj.city) {
        return `${locationObj.street}, ${locationObj.city}${locationObj.postalCode ? `, ${locationObj.postalCode}` : ''}`;
      } else {
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return Object.values(locationObj)
          .filter(val => val && typeof val === 'string')
          .join(', ');
      }
    }

    return '';
  };

  const nextImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex(prevIndex =>
      prevIndex === allImages.length - 1 ? 0 : prevIndex + 1
    );
  };

  const prevImage = (e: React.MouseEvent) => {
    e.stopPropagation();
    setCurrentImageIndex(prevIndex =>
      prevIndex === 0 ? allImages.length - 1 : prevIndex - 1
    );
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ç–µ–≥–æ–≤ —Å–æ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–µ–π
  const renderTags = (tags: string[]) => {
    const maxVisible = 2; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
    const visibleTags = tags.slice(0, maxVisible);
    const hiddenCount = tags.length - maxVisible;

    return (
      <div className={styles.tagsContainer}>
        {visibleTags.map((tag, i) => (
          <span key={i} className={styles.tag}>
            {translateFeature(tag)}
          </span>
        ))}
        {hiddenCount > 0 && (
          <span className={styles.moreTag}>+{hiddenCount}</span>
        )}
      </div>
    );
  };

  const handleSaveClick = async (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();

    if (!isAuthenticated || !typedUser) {
      showNotification(t('restaurantPage.favorites.loginRequired'), 'info');
      navigate('/login', { state: { from: locationHook.pathname } });
      return;
    }

    setIsLoading(true);

    try {
      const newSavedState = !isSaved;

      if (newSavedState) {
        await favoriteService.addToFavorites(typedUser.id, id);
        showNotification(t('restaurantPage.favorites.added'), 'success');
      } else {
        await favoriteService.removeFromFavorites(typedUser.id, id);
        showNotification(t('restaurantPage.favorites.removed'), 'success');
      }

      await favoriteService.updateUserFavoritesCount(typedUser.id);
      setIsSaved(newSavedState);

      if (onSaveToggle) {
        onSaveToggle(newSavedState, e);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      showNotification(t('restaurantPage.favorites.error'), 'error');
    } finally {
      setIsLoading(false);
    }
  };

  const handleClick = () => {
    if (onClick) {
      onClick();
    }
  };

  const hasMultipleImages = allImages.length > 1;

  return (
    <div className={cx(styles.card, { [styles.squareCard]: variant === 'square' })} onClick={handleClick}>
      <div className={cx(styles.cardImageContainer, { [styles.squareImageContainer]: variant === 'square' })}>
        {allImages.length > 0 ? (
          <>
            <img
              src={allImages[currentImageIndex]}
              alt={`${title} - —Ñ–æ—Ç–æ ${currentImageIndex + 1}`}
              className={styles.cardImage}
              loading="lazy"
            />
            {hasMultipleImages && (
              <>
                <button
                  className={`${styles.carouselArrow} ${styles.carouselArrowLeft}`}
                  onClick={prevImage}
                  aria-label="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                >
                  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="15 18 9 12 15 6"></polyline>
                  </svg>
                </button>
                <button
                  className={`${styles.carouselArrow} ${styles.carouselArrowRight}`}
                  onClick={nextImage}
                  aria-label="–°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                >
                  <svg viewBox="0 0 24 24" width="24" height="24" fill="none" stroke="currentColor" strokeWidth="2">
                    <polyline points="9 18 15 12 9 6"></polyline>
                  </svg>
                </button>
              </>
            )}
            {hasMultipleImages && (
              <div className={styles.carouselIndicators}>
                {allImages.map((_, index) => (
                  <span
                    key={index}
                    className={`${styles.carouselIndicator} ${index === currentImageIndex ? styles.carouselIndicatorActive : ''}`}
                    onClick={e => {
                      e.stopPropagation();
                      setCurrentImageIndex(index);
                    }}
                  />
                ))}
              </div>
            )}
          </>
        ) : (
          <div className={styles.cardImagePlaceholder}>–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
        )}
        <button
          className={cx(styles.favoriteButton, { [styles.favoriteLoading]: isLoading })}
          onClick={handleSaveClick}
          aria-label={isSaved ? '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
          disabled={isLoading}
        >
          {isLoading ? (
            <div className={styles.loadingSpinner}></div>
          ) : (
            <svg viewBox="0 0 24 24" fill={isSaved ? '#fff' : 'none'} stroke="#fff" strokeWidth="2" width="24" height="24">
              <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
            </svg>
          )}
        </button>
        {rating && (
          <div className={styles.ratingBadge}>
            {rating.toFixed(1)} <span className={styles.starIcon}>‚òÖ</span>
          </div>
        )}
      </div>
      <div className={styles.cardContent}>
        <div className={styles.cardHeader}>
          <h3 className={styles.cardTitle}>{title}</h3>
          {priceRange && (
            <div
              className={`${styles.priceTag} ${priceRange === '‚Ç¨‚Ç¨‚Ç¨' ? styles.expensivePrice : priceRange === '‚Ç¨‚Ç¨' ? styles.moderatePrice : styles.affordablePrice
                }`}
            >
              {priceRange}
            </div>
          )}
        </div>
        {location && <p className={styles.cardLocation}>{formattedLocation()}</p>}
        {/* –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ */}
        {[...cuisineTags, ...featureTags].length > 0 && renderTags([...cuisineTags, ...featureTags])}
      </div>
    </div>
  );
};

export default Card;